---
---
function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}
class App extends React.Component {
  constructor() {
    super();
    this.state = {
      cards: [
      { front: 'Hej', back: 'Hello' },
      { front: 'Varsågod', back: 'You\'re welcome' },
      { front: 'Snälla', back: 'Please' },
      { front: 'Ursäkta mig', back: 'Excuse me' },
      { front: 'Jag förstår inte', back: 'I do not understand' },
      { front: 'Talar du engelska?', back: 'Do you speak English?' },
      { front: 'Vad heter du?', back: 'What is your name?' },
      { front: 'Offentlig telefon', back: 'Public telephone' },
      { front: 'Nyhetsbyrå', back: 'News agency' },
      { front: 'Ingång', back: 'Entrance' },
      { front: 'Utgång', back: 'Exit' },
      { front: 'Herrar', back: 'Men' },
      { front: 'Damer', back: 'Women' }] };


  }
  render() {
    return (
      React.createElement("div", { className: "App" },
      React.createElement(Flashcards, {
        cards: this.state.cards })));


  }}


class Flashcards extends React.Component {
  constructor(props) {
    super(props);_defineProperty(this, "arrowHandler",




    left => {
      const { cardIndex } = this.state;
      if (left) {
        if (cardIndex - 1 >= 0) {
          this.setState({ cardIndex: cardIndex - 1 });
        }
      } else {
        if (cardIndex + 1 < this.props.cards.length) {
          this.setState({ cardIndex: cardIndex + 1 });
        }
      }
    });this.state = { cardIndex: 0 };}
  render() {
    return (
      React.createElement("div", { className: "flashcard-viewer noselect" },
      React.createElement("div", { className: "flashcard-item-wrapper" },
      React.createElement(FlashcardItem, {
        cardIndex: this.state.cardIndex,
        card: this.props.cards[this.state.cardIndex] })),

      React.createElement("div", null,
      React.createElement(NavButtons, {
        arrowHandler: this.arrowHandler,
        cardIndex: this.state.cardIndex,
        cardLength: this.props.cards.length }))));



  }}


class FlashcardItem extends React.Component {
  constructor(props) {
    super(props);_defineProperty(this, "clickHandler",













    () => {
      this.setState({
        flipped: !this.state.flipped,
        flipStyle: { transition: 'transform 0.5s' } });

    });this.state = { flipped: false, flipStyle: { transition: 'transform 0.5s' } };}componentDidUpdate(prevProps) {if (prevProps.cardIndex !== this.props.cardIndex) {this.setState({ flipped: false, flipStyle: {} });}}
  render() {
    const rotation = this.state.flipped ? 180 : 0;
    const frontStyle = { ...this.state.flipStyle, transform: `rotateY(${rotation}deg)` };
    const backStyle = { ...this.state.flipStyle, transform: `rotateY(${180 + rotation}deg)` };
    return (
      React.createElement("div", { className: "flashcard-item", onClick: () => this.clickHandler() },
      React.createElement("div", { className: "flashcard-item-inner", style: frontStyle },
      React.createElement("div", { className: "flashcard-item-helper" }, "front"),
      this.props.card.front),

      React.createElement("div", { className: "flashcard-item-inner", style: backStyle },
      React.createElement("div", { className: "flashcard-item-helper" }, "back"),
      this.props.card.back)));



  }}


NavButtons = props => {
  const leftStyle = props.cardIndex - 1 < 0 ? { opacity: 0.5 } : {};
  const rightStyle = props.cardIndex + 1 >= props.cardLength ? { opacity: 0.5 } : {};
  return (
    React.createElement("div", { className: "nav-buttons-wrapper" },
    React.createElement("div", { className: "nav-arrow-btn", style: leftStyle, onClick: () => props.arrowHandler(true) }, "\u2190"),
    `${props.cardIndex + 1}/${props.cardLength}`,
    React.createElement("div", { className: "nav-arrow-btn", style: rightStyle, onClick: () => props.arrowHandler(false) }, "\u2192")));


};

ReactDOM.render(React.createElement(App, null), document.getElementById('root'));